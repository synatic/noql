{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"js-library/","title":"Quick Start","text":""},{"location":"js-library/#installation","title":"Installation","text":"<p>Install NoQL using the npm install command:</p> <pre><code>npm i @synatic/noql --save\n</code></pre>"},{"location":"js-library/#usage","title":"Usage","text":"<p>NoQL's <code>parseSQL</code> method outputs an object with a type, either <code>query</code> or <code>aggregate</code>, along with the components of the Mongo query. To use the output object, construct a query with <code>MongoClient</code> from the MongoDB NodeJS Driver:</p> Example usage of <code>parseSQL</code> with <code>MongoClient</code> <p>Node.js:</p> <pre><code>const SQLParser = require('@synatic/noql');\nconst {MongoClient} = require('mongodb');\n\n(async () =&gt; {\n    try {\n        client = new MongoClient('mongodb://127.0.0.1:27017');\n        await client.connect();\n        const db = client.db('noql-test');\n\n        const parsedSQL = SQLParser.parseSQL(\n            \"select id from `films` limit 10\", \n            { database: 'postgresql' /* or 'mysql' */ } });\n        if (parsedSQL.type === 'query') {\n            console.log(\n                await db\n                    .collection(parsedSQL.collection)\n                    .find(parsedSQL.query || {}, parsedSQL.projection || {})\n                    .limit(parsedSQL.limit || 50)\n                    .toArray()\n            );\n        } else if (parsedSQL.type === 'aggregate') {\n            console.log(\n                await db\n                    .collection(parsedSQL.collections[0])\n                    .aggregate(parsedSQL.pipeline)\n                    .toArray()\n            );\n        }\n    } catch (exp) {\n        console.error(exp);\n    }\n})();\n</code></pre> <p>See the API Reference for more information.</p>"},{"location":"js-library/api-reference/","title":"API Reference","text":""},{"location":"js-library/api-reference/#parsesqlsqlstatement-options","title":"<code>parseSQL(sqlStatement, options)</code>","text":"<p>Parses the given SQL statement to a JSON output object containing Mongo query components. It automatically determines if the output should be an aggregate pipeline or query depending on if a straight query is possible. The output JSON object properties can be used to construct a MongoDB query.</p> <ul> <li><code>sqlStatement</code> <code>&lt;string&gt;</code> - The SQL statement to parse</li> <li><code>options</code> <code>&lt;object&gt;</code> - Options for the parser</li> <li><code>database</code> <code>&lt;string&gt;</code> - The database type. Can be <code>mysql</code> or <code>postgresql</code>. Defaults to <code>mysql</code>.</li> <li>Returns: <code>&lt;object&gt;</code></li> <li><code>type</code> <code>&lt;string&gt;</code> - The type of query. Can be <code>query</code> or <code>aggregate</code>.</li> <li><code>collection</code> <code>&lt;string&gt;</code> - The collection to query for a <code>query</code> type.</li> <li><code>query</code> <code>&lt;object&gt;</code> - The query object to use for a <code>query</code> type.</li> <li><code>projection</code> <code>&lt;object&gt;</code> - The projection object to use for a <code>query</code> type.</li> <li><code>limit</code> <code>&lt;number&gt;</code> - The limit to use for a <code>query</code> type.</li> <li><code>pipeline</code> <code>&lt;array&gt;</code> - The aggregate array to use for an <code>aggregate</code> type.</li> <li><code>collections</code> <code>&lt;array&gt;</code> - The collections to use for an <code>aggregate</code> type.</li> </ul> Example <code>parseSQL</code> usage for a query <p>Node.js: <pre><code>const SQLMongoParser=require('@synatic/noql');\n\nSQLMongoParser.parseSQL(\n            \"select id from `films` where `id` &gt; 10 limit 10\", \n            { database: 'postgresql' /* or 'mysql' */ } );\n</code></pre></p> <p>Output:</p> <pre><code>{\n    \"limit\": 10,\n    \"collection\": \"films\",\n    \"projection\": {\n        \"id\": \"$id\"\n    },\n    \"query\": {\n        \"id\": {\n            \"$gt\": 10\n        }\n    },\n    \"type\": \"query\"\n}\n</code></pre> Example <code>parseSQL</code> usage for an aggregate <p>Node.js:</p> <p><pre><code>const SQLMongoParser=require('@synatic/noql');\n\nSQLMongoParser.parseSQL(\n        \"select id from `films` where `id` &gt; 10 group by id\"),\n        { database: 'postgresql' /* or 'mysql' */ });\n</code></pre> Output:</p> <pre><code>{\n    \"pipeline\": [\n        {\n            \"$match\": {\n                \"id\": {\n                    \"$gt\": 10\n                }\n            }\n        },\n        {\n            \"$group\": {\n                \"_id\": {\n                    \"id\": \"$id\"\n                }\n            }\n        },\n        {\n            \"$project\": {\n                \"id\": \"$_id.id\",\n                \"_id\": 0\n            }\n        }\n    ],\n    \"collections\": [\n        \"films\"\n    ]\n}\n</code></pre>"},{"location":"js-library/api-reference/#using-the-output-with-mongoclient","title":"Using the output with MongoClient","text":"<p>To use the output object,  construct a query with <code>MongoClient</code> from the MongoDB NodeJS Driver</p> Example usage with <code>MongoClient</code> <p>Node.js: <pre><code>const SQLParser = require('@synatic/noql');\nconst {MongoClient} = require('mongodb');\n\n(async () =&gt; {\n    try {\n        client = new MongoClient('mongodb://127.0.0.1:27017');\n        await client.connect();\n        const db = client.db('noql-test');\n\n        const parsedSQL = SQLParser.parseSQL(\n                \"select id from `films` limit 10\",\n                 { database: 'postgresql' /* or 'mysql' */ });\n        if (parsedSQL.type === 'query') {\n            console.log(\n                await db\n                    .collection(parsedSQL.collection)\n                    .find(parsedSQL.query || {}, parsedSQL.projection || {})\n                    .limit(parsedSQL.limit || 50)\n                    .toArray()\n            );\n        } else if (parsedSQL.type === 'aggregate') {\n            console.log(\n                await db\n                    .collection(parsedSQL.collections[0])\n                    .aggregate(parsedSQL.pipeline)\n                    .toArray()\n            );\n        }\n    } catch (exp) {\n        console.error(exp);\n    }\n})();\n</code></pre></p>"},{"location":"js-library/api-reference/#parsesqltoastsqlstatement-options","title":"<code>parseSQLtoAST(sqlStatement, options)</code>","text":"<p>Parses a SQL statement to an AST (abstract syntax tree)</p> <ul> <li><code>sqlStatement</code> <code>&lt;string&gt;</code> - The SQL statement to parse</li> <li><code>options</code> <code>&lt;object&gt;</code> - Options for the parser</li> <li><code>database</code> <code>&lt;string&gt;</code> - The database type. Can be <code>mysql</code> or <code>postgresql</code>. Defaults to <code>mysql</code>.</li> <li>Returns: <code>&lt;object&gt;</code></li> <li><code>tableList</code> <code>&lt;string[]&gt;</code> - A list of tables used in the query</li> <li><code>columnList</code> <code>&lt;string[]&gt;</code> - A list of columns used in the query</li> <li><code>ast</code> <code>&lt;object&gt;</code> - The AST (abstract syntax tree) of the query</li> </ul> Example <code>parseSQLtoAST</code> usage <p>Node.js <pre><code>const SQLMongoParser = require('@synatic/noql');\n\nSQLMongoParser.parseSQLtoAST(\n    \"select id from `films`\", \n    { database: 'postgresql' /* or 'mysql' */ });\n</code></pre></p> <p>Output: <pre><code>{\n    \"tableList\": [\n        \"select::null::films\"\n    ],\n    \"columnList\": [\n        \"select::null::id\"\n    ],\n    \"ast\": {\n        \"with\": null,\n        \"type\": \"select\",\n        \"options\": null,\n        \"distinct\": null,\n        \"columns\": [\n            {\n                \"expr\": {\n                    \"type\": \"column_ref\",\n                    \"table\": null,\n                    \"column\": \"id\"\n                },\n                \"as\": null\n            }\n        ],\n        \"from\": [\n            {\n                \"db\": null,\n                \"table\": \"films\",\n                \"as\": null\n            }\n        ],\n        \"where\": null,\n        \"groupby\": null,\n        \"having\": null,\n        \"orderby\": null,\n        \"limit\": null,\n        \"for_update\": null\n    }\n}\n</code></pre></p>"},{"location":"js-library/api-reference/#makemongoquerysqlstatement-options","title":"<code>makeMongoQuery(sqlStatement, options)</code>","text":"<p>Generates Mongo query components from a SQL statement if possible. Throws an exception if not possible.</p> <p>Use <code>canQuery</code> to test if a query can be created, or if an aggregate must be made instead.</p> <p>If an aggregate must be made, use <code>makeMongoAggregate</code> instead. If you want NoQL to automatically choose, use <code>parseSQL</code> instead.</p> <ul> <li><code>sqlStatement</code> <code>&lt;string&gt;</code> - The SQL statement to parse</li> <li><code>options</code> <code>&lt;object&gt;</code> - Options for the parser</li> <li><code>database</code> <code>&lt;string&gt;</code> - The database type. Can be <code>mysql</code> or <code>postgresql</code>. Defaults to <code>mysql</code>.</li> <li>Returns: <code>&lt;object&gt;</code></li> <li><code>type</code> <code>&lt;string&gt;</code> - The type of query. It will be <code>query</code>.</li> <li><code>collection</code> <code>&lt;string&gt;</code> - The collection to query for a <code>query</code> type.</li> <li><code>query</code> <code>&lt;object&gt;</code> - The query object to use for a <code>query</code> type.</li> <li><code>projection</code> <code>&lt;object&gt;</code> - The projection object to use for a <code>query</code> type.</li> <li><code>limit</code> <code>&lt;number&gt;</code> - The limit to use for a <code>query</code> type.</li> </ul> Example <code>makeMongoQuery</code> usage <p>Node.js <pre><code>const SQLMongoParser=require('@synatic/noql');\n\nSQLMongoParser.makeMongoQuery(\n    \"select id from `films` where id &gt; 10 limit 10\", \n    { database: 'postgresql' /* or 'mysql' */ });\n</code></pre></p> <p>Output: <pre><code>{\n    \"type\": \"query\",\n    \"limit\": 10,\n    \"collection\": \"films\",\n    \"projection\": {\n        \"id\": \"$id\"\n    },\n    \"query\": {\n        \"id\": {\n            \"$gt\": 10\n        }\n    }\n}\n</code></pre></p>"},{"location":"js-library/api-reference/#makemongoaggregatesqlstatement-options","title":"<code>makeMongoAggregate(sqlStatement, options)</code>","text":"<p>Generates a mongo aggregate pipeline components from a SQL statement.</p> <p>If your SQL statement can be represented by a straight query, use <code>makeMongoQuery</code> instead. If you want NoQL to automatically choose, use <code>parseSQL</code> instead.</p> <ul> <li><code>sqlStatement</code> <code>&lt;string&gt;</code> - The SQL statement to parse</li> <li><code>options</code> <code>&lt;object&gt;</code> - Options for the parser</li> <li><code>database</code> <code>&lt;string&gt;</code> - The database type. Can be <code>mysql</code> or <code>postgresql</code>. Defaults to <code>mysql</code>.</li> <li>Returns: <code>&lt;object&gt;</code></li> <li><code>type</code> <code>&lt;string&gt;</code> - The type of query. It will be <code>aggregate</code>.</li> <li><code>pipeline</code> <code>&lt;array&gt;</code> - The aggregate pipeline array to use for an <code>aggregate</code> type.</li> <li><code>collections</code> <code>&lt;array&gt;</code> - The collections to use for an <code>aggregate</code> type.</li> </ul> Example <code>makeMongoAggregate</code> usage <p>Node.js</p> <p><pre><code>const SQLMongoParser = require('@synatic/noql');\n\nSQLMongoParser.makeMongoAggregate(\n    \"select id from `films` group by id\", \n    { database: 'postgresql' /* or 'mysql' */ });\n</code></pre> Output:</p> <pre><code>{\n    \"pipeline\": [\n        {\n            \"$group\": {\n                \"_id\": {\n                    \"id\": \"$id\"\n                }\n            }\n        },\n        {\n            \"$project\": {\n                \"id\": \"$_id.id\",\n                \"_id\": 0\n            }\n        }\n    ],\n    \"collections\": [\n        \"films\"\n    ]\n}\n</code></pre>"},{"location":"js-library/api-reference/#canquerysqlstatement-options","title":"<code>canQuery(sqlStatement, options)</code>","text":"<p>Checks if a SQL statement can be represented by a straight Mongo query, or if an aggregate query must be used.</p> <ul> <li><code>sqlStatement</code> <code>&lt;string&gt;</code> - The SQL statement to check</li> <li><code>options</code> <code>&lt;object&gt;</code> - Options for the parser</li> <li><code>database</code> <code>&lt;string&gt;</code> - The database type. Can be <code>mysql</code> or <code>postgresql</code>. Defaults to <code>mysql</code>.</li> <li>Returns: <code>&lt;boolean&gt;</code></li> </ul> Example <code>canQuery</code> usage <p>Node.js:</p> <pre><code>const SQLMongoParser = require('@synatic/noql');\n\nSQLMongoParser.canQuery('select id from `films`');\n// Returns true\n\nSQLMongoParser.canQuery('select id from `films` group by id');\n//Returns false\n</code></pre>"},{"location":"js-library/getting-started/","title":"Getting Started","text":""},{"location":"js-library/getting-started/#installation","title":"Installation","text":"<p>Install NoQL using the npm install command:</p> <pre><code>npm i @synatic/noql --save\n</code></pre>"},{"location":"js-library/getting-started/#usage","title":"Usage","text":"<p>NoQL's <code>parseSQL</code> method outputs an object with a type, either <code>query</code> or <code>aggregate</code>, along with the components of the Mongo query. To use the output object, construct a query with <code>MongoClient</code> from the MongoDB NodeJS Driver: </p> Example usage of <code>parseSQL</code> with <code>MongoClient</code> <p>Node.js:</p> <pre><code>const SQLParser = require('@synatic/noql');\nconst {MongoClient} = require('mongodb');\n\n(async () =&gt; {\n    try {\n        client = new MongoClient('mongodb://127.0.0.1:27017');\n        await client.connect();\n        const db = client.db('noql-test');\n\n        const parsedSQL = SQLParser.parseSQL(\n            \"select id from `films` limit 10\", \n            { database: 'postgresql' /* or 'mysql' */ } });\n        if (parsedSQL.type === 'query') {\n            console.log(\n                await db\n                    .collection(parsedSQL.collection)\n                    .find(parsedSQL.query || {}, parsedSQL.projection || {})\n                    .limit(parsedSQL.limit || 50)\n                    .toArray()\n            );\n        } else if (parsedSQL.type === 'aggregate') {\n            console.log(\n                await db\n                    .collection(parsedSQL.collections[0])\n                    .aggregate(parsedSQL.pipeline)\n                    .toArray()\n            );\n        }\n    } catch (exp) {\n        console.error(exp);\n    }\n})();\n</code></pre>"},{"location":"playground/","title":"Playground","text":"<p>Enter a SQL statement below to see NoQL's output, as well as the equivalent Mongo Shell query, and Node.js code.</p> Always create an aggregate Automatically Unwind Joins Optimize Joins SELECT * FROM rockets Convert <p>Error parsing SQL statement</p> <p></p> <p>Mongo Result</p> Mongo Shell Query Node.js Code NoQL Output Optimized Pipeline"},{"location":"sql-syntax/aggregates/","title":"Aggregates","text":"<p>NoQL supports standard SQL aggregate functions with GROUP BY like SUM,AVG,MAX and MIN. </p> <p>Aggregate results are returned as arrays for FIRSTN and LASTN.</p>"},{"location":"sql-syntax/aggregates/#supported-aggregate-functions","title":"Supported Aggregate Functions","text":""},{"location":"sql-syntax/aggregates/#sum","title":"SUM","text":"<p><code>SUM(field)</code></p> <p>Returns the sum of all values in the given field.</p> Example <code>SUM</code> usage <pre><code>SELECT \n    SUM(`id`) AS aggrVal\n    ,`Address.City` AS City \nFROM \n    `customers` \nGROUP BY \n    `Address.City` \nORDER BY `Address.City`;\n</code></pre>"},{"location":"sql-syntax/aggregates/#avg","title":"AVG","text":"<p><code>AVG(field)</code></p> <p>Returns the average of all values in the given field.</p> Example <code>AVG</code> usage <pre><code>SELECT\n    AVG(`id`) AS aggrVal\n    ,`Address.City` AS City\nFROM\n    `customers`\nGROUP BY \n    `Address.City`\nORDER BY \n    `Address.City`;\n</code></pre>"},{"location":"sql-syntax/aggregates/#min","title":"MIN","text":"<p><code>MIN(field)</code></p> <p>Returns the minimum value in the given field.</p> Example <code>MIN</code> usage <pre><code>SELECT\n    MIN(`id`) AS aggrVal\n    ,`Address.City` AS City\nFROM \n    `customers`\nGROUP BY\n    `Address.City`\nORDER BY\n    `Address.City`;\n</code></pre>"},{"location":"sql-syntax/aggregates/#max","title":"MAX","text":"<p><code>MAX(field)</code></p> <p>Returns the maximum value in the given field.</p> Example <code>MAX</code> usage <pre><code>SELECT \n    MAX(`id`) AS aggrVal\n    ,`Address.City` AS City\nFROM\n    `customers`\nGROUP BY\n    `Address.City`\nORDER BY\n    `Address.City`;\n</code></pre>"},{"location":"sql-syntax/aggregates/#count","title":"COUNT","text":"<p><code>COUNT(field)</code></p> <p>Returns the count of rows in the given group.</p> Example <code>COUNT</code> usage <pre><code>SELECT \n    COUNT(*) AS countVal\n    ,`Address.City` AS City\nFROM\n    `customers`\nGROUP BY\n    `Address.City`\nORDER BY\n    `Address.City`;\n</code></pre>"},{"location":"sql-syntax/aggregates/#count-distinct","title":"COUNT DISTINCT","text":"<p><code>COUNT(DISTINCT field)</code></p> <p>Returns the distinct count of a specific field in the given group.</p> Example <code>COUNT DISTINCT</code> usage <pre><code>SELECT \n    COUNT(DISTINCT \"Address.Town\") AS countVal\n    ,`Address.City` AS City\nFROM\n    `customers`\nGROUP BY\n    `Address.City`\nORDER BY\n    `Address.City`;\n</code></pre>"},{"location":"sql-syntax/aggregates/#firstn","title":"FIRSTN","text":"<p><code>FIRSTN(limit)</code></p> <p>Returns the first n records in the group as an array</p> Example <code>FIRSTN</code> usage <pre><code>SELECT\n    `Address.City` AS City\n    ,FIRSTN(10) as CustomersPerCity\nFROM \n    `customers`\nGROUP BY\n    `Address.City`;\n</code></pre>"},{"location":"sql-syntax/aggregates/#lastn","title":"LASTN","text":"<p><code>LASTN(limit)</code></p> <p>Returns the last n records in the group as an array</p> Example <code>LASTN</code> usage <pre><code>SELECT\n    `Address.City` AS City\n    ,LASTN(10) as CustomersPerCity\nFROM \n    `customers`\nGROUP BY\n    `Address.City`;\n</code></pre>"},{"location":"sql-syntax/aggregates/#sum-case-logic","title":"<code>SUM</code> - <code>CASE</code> Logic","text":"<p>Sum Case logic is supported:</p> Example <code>SUM</code> - <code>CASE</code> usage <pre><code>SELECT \n    SUM(CASE WHEN `Address.City`='Ueda' THEN 1 ELSE 0 END) AS Ueda\n    ,SUM(CASE WHEN `Address.City`='Tete' THEN 1 ELSE 0 END) AS Tete \nFROM \n    `customers` \n</code></pre>"},{"location":"sql-syntax/arrays/","title":"Arrays","text":""},{"location":"sql-syntax/arrays/#array-support","title":"Array Support","text":"<p>NoQL supports many methods that perform operations on array fields. They can be used as part of select statements and queries.</p> <p>NoQL uses sub-selects with a FROM array field to query array fields in collections. E.g.</p> Using sub-selects to query array fields <pre><code>SELECT\n    (SELECT * FROM Rentals WHERE staffId=2) AS t\nFROM\n    `customers`\n</code></pre> <p>Using '$$ROOT' in sub select promotes the field to the root value of the array</p> Using '$$ROOT' in sub select <pre><code>SELECT\n    (SELECT filmId AS `$$ROOT` FROM Rentals WHERE staffId=2) AS t\nFROM\n    `customers`\n</code></pre> <p>Slicing the array is supported by limit and offset in queries</p> Slicing an array with limit and offset <pre><code>SELECT\n    (SELECT * FROM Rentals WHERE staffId=2 LIMIT 10 OFFSET 5) AS t\nFROM\n    `customers`\n</code></pre> <p>Sorting Arrays is supported in MongoDB 5.2+ and NoQL</p> Sorting Arrays is supported <pre><code>SELECT id,\n    (SELECT * FROM Rentals ORDER BY id DESC) AS totalRentals\nFROM customers\n</code></pre> <p>Aggregation functions are not supported in a sub select</p> <p>Aggregation functions are not supported in a sub select. For example, the following won't work <code>sql     --Wont'Work     SELECT id,         (SELECT count(*) AS count FROM Rentals) AS totalRentals     FROM customers</code></p>"},{"location":"sql-syntax/arrays/#unwind-function","title":"UNWIND Function","text":"<p><code>UNWIND(array_expr)</code></p> <p>NoQL has a high level unwind function that will unwind array fields. For Joins, the unwind join hint should be used.</p> UNWIND in SELECT <pre><code>SELECT\n  field1,\n  UNWIND(arrFld) as arrFld\nFROM\n  test\n</code></pre> Complex UNWIND <pre><code>SELECT\n    MERGE_OBJECTS(\n        (SELECT\n            t.CustomerID\n            ,t.Name\n        )\n        ,t.Rental\n        ) AS `$$ROOT`\nFROM\n    (SELECT\n        id AS CustomerID\n        ,`First Name` AS Name\n        ,UNWIND(Rentals) AS Rental\n    FROM customers) AS t\n</code></pre>"},{"location":"sql-syntax/arrays/#supported-array-functions","title":"Supported Array Functions","text":""},{"location":"sql-syntax/arrays/#all_elements_true","title":"ALL_ELEMENTS_TRUE","text":"<p><code>ALL_ELEMENTS_TRUE(array expr)</code></p> <p>Returns true when all elements in the array are true.</p> Example <code>ALL_ELEMENTS_TRUE</code> usage <pre><code>SELECT id,\n    (CASE WHEN ALL_ELEMENTS_TRUE(Rentals) THEN 'Yes' ELSE 'No' END) AS test\nFROM `customers`;\n</code></pre>"},{"location":"sql-syntax/arrays/#join","title":"JOIN","text":"<p><code>JOIN(array expr, delimiter)</code></p> <p>Joins all values into a string.</p> Example <code>JOIN</code> usage <pre><code>SELECT id,\n    JOIN((SELECT Name FROM Rentals),',') AS RentalNames\nFROM customers;\n</code></pre>"},{"location":"sql-syntax/arrays/#any_element_true","title":"ANY_ELEMENT_TRUE","text":"<p><code>ANY_ELEMENT_TRUE(array expr)</code></p> <p>Returns true when any element in the array is true.</p> Example <code>ANY_ELEMENT_TRUE</code> usage <pre><code>SELECT id,\n    (CASE WHEN ANY_ELEMENT_TRUE(Rentals) THEN 'Yes' ELSE 'No' END) AS test\nFROM `customers`;\n</code></pre>"},{"location":"sql-syntax/arrays/#array_elem_at","title":"ARRAY_ELEM_AT","text":"<p><code>ARRAY_ELEM_AT(array expr,position)</code></p> <p>Returns the element of an array at a position.</p> Example <code>ARRAY_ELEM_AT</code> usage <pre><code>SELECT id,\n    ARRAY_ELEM_AT(Rentals,5) AS test\nFROM `customers`;\n</code></pre>"},{"location":"sql-syntax/arrays/#array_range","title":"ARRAY_RANGE","text":"<p><code>ARRAY_RANGE(start,stop,step)</code></p> <p>Generates an array of numbers from to with the specified step.</p> Example <code>ARRAY_RANGE</code> usage <pre><code>SELECT id,\n    ARRAY_RANGE(0,10,2) AS test\nFROM `customers`;\n</code></pre>"},{"location":"sql-syntax/arrays/#array_to_object","title":"ARRAY_TO_OBJECT","text":"<p><code>ARRAY_TO_OBJECT(array expr)</code></p> <p>Converts the array to an object.</p> Example <code>ARRAY_TO_OBJECT</code> usage <pre><code>SELECT id,\n    ARRAY_TO_OBJECT(OBJECT_TO_ARRAY(`Address`)) AS test\nFROM `customers`;\n</code></pre>"},{"location":"sql-syntax/arrays/#concat_arrays","title":"CONCAT_ARRAYS","text":"<p><code>CONCAT_ARRAYS(array expr,...)</code></p> <p>Concatenate the provided list of arrays.</p> Example <code>CONCAT_ARRAYS</code> usage <pre><code>SELECT id,\n    CONCAT_ARRAYS((SELECT `Film Title` AS `$$ROOT` FROM `Rentals`), ARRAY_RANGE(0,10,2)) AS test\nFROM `customers`;\n</code></pre>"},{"location":"sql-syntax/arrays/#first_in_array","title":"FIRST_IN_ARRAY","text":"<p><code>FIRST_IN_ARRAY(array expr)</code></p> <p>Returns the first element of an array.</p> Example <code>FIRST_IN_ARRAY</code> usage <pre><code>SELECT id,\n    FIRST_IN_ARRAY(`Rentals`) AS test\nFROM `customers`;\n</code></pre>"},{"location":"sql-syntax/arrays/#indexof_array","title":"INDEXOF_ARRAY","text":"<p><code>INDEXOF_ARRAY(array expr,value,[start],[end])</code></p> <p>Returns the index of the value in the array.</p> Example <code>INDEXOF_ARRAY</code> usage <pre><code>SELECT id,\n    INDEXOF_ARRAY((SELECT `Film Title` AS `$$ROOT` FROM `Rentals`),5) AS test\nFROM `customers`;\n</code></pre>"},{"location":"sql-syntax/arrays/#is_array","title":"IS_ARRAY","text":"<p><code>IS_ARRAY(array expr)</code></p> <p>Returns true when the field is an array.</p> Example <code>IS_ARRAY</code> usage <pre><code>SELECT id,\n    (CASE WHEN IS_ARRAY(Rentals) THEN 'Yes' ELSE 'No' END) AS test\nFROM `customers`;\n</code></pre>"},{"location":"sql-syntax/arrays/#last_in_array","title":"LAST_IN_ARRAY","text":"<p><code>LAST_IN_ARRAY(array expr)</code></p> <p>Returns the last element of an array.</p> Example <code>LAST_IN_ARRAY</code> usage <pre><code>SELECT id,\n    LAST_IN_ARRAY(`Rentals`) AS test\nFROM `customers`;\n</code></pre>"},{"location":"sql-syntax/arrays/#object_to_array","title":"OBJECT_TO_ARRAY","text":"<p><code>OBJECT_TO_ARRAY(expr)</code></p> <p>Converts the object to an array.</p> Example <code>OBJECT_TO_ARRAY</code> usage <pre><code>SELECT id,\n    OBJECT_TO_ARRAY(`Address`) AS test\nFROM `customers`;\n</code></pre>"},{"location":"sql-syntax/arrays/#reverse_array","title":"REVERSE_ARRAY","text":"<p><code>REVERSE_ARRAY(array expr)</code></p> <p>Reverses the order of an array field.</p> Example <code>REVERSE_ARRAY</code> usage <pre><code>SELECT id,\n    REVERSE_ARRAY(`Rentals`) AS test\nFROM `customers`;\n</code></pre>"},{"location":"sql-syntax/arrays/#set_difference","title":"SET_DIFFERENCE","text":"<p><code>SET_DIFFERENCE(array expr,...)</code></p> <p>Returns an array as the difference of the provided arrays.</p> Example <code>SET_DIFFERENCE</code> usage <pre><code>SELECT id,\n    SET_DIFFERENCE((SELECT `Film Title` AS `$$ROOT` FROM `Rentals`), PARSE_JSON('[ 1,2,3,4]')) AS test\nFROM `customers`;\n</code></pre>"},{"location":"sql-syntax/arrays/#set_equals","title":"SET_EQUALS","text":"<p><code>SET_EQUALS(array expr,...)</code></p> <p>Returns true or false if the arrays are equal.</p> Example <code>SET_EQUALS</code> usage <pre><code>SELECT id,\n    SET_EQUALS((SELECT `Film Title` AS `$$ROOT` FROM `Rentals`), PARSE_JSON('[ 1,2,3,4]')) AS test\nFROM `customers`;\n</code></pre>"},{"location":"sql-syntax/arrays/#set_intersection","title":"SET_INTERSECTION","text":"<p><code>SET_INTERSECTION(array expr,...)</code></p> <p>Returns an array as the difference of the provided arrays.</p> Example <code>SET_INTERSECTION</code> usage <pre><code>SELECT id,\n    SET_INTERSECTION((SELECT filmId AS `$$ROOT` FROM `Rentals`), PARSE_JSON('[ 1,2,3,4]')) AS\ntest FROM `customers`;\n</code></pre>"},{"location":"sql-syntax/arrays/#set_is_subset","title":"SET_IS_SUBSET","text":"<p><code>SET_IS_SUBSET(array expr,...)</code></p> <p>Returns whether an array is a subset of another.</p> Example <code>SET_IS_SUBSET</code> usage <pre><code>SELECT id,\n    SET_IS_SUBSET((SELECT filmId AS `$$ROOT` FROM `Rentals`), PARSE_JSON(\u2018[ 1,2,3,4] \u2018)) AS test\nFROM `customers`;\n</code></pre>"},{"location":"sql-syntax/arrays/#set_union","title":"SET_UNION","text":"<p><code>SET_UNION(array expr,...)</code></p> <p>Returns an array as the union of the provided arrays.</p> Example <code>SET_UNION</code> usage <pre><code>SELECT id,\n    SET_UNION((SELECT filmId AS `$$ROOT` FROM `Rentals`), PARSE_JSON(\u2018[ 1,2,3,4] \u2018)) AS test\nFROM `customers`;\n</code></pre>"},{"location":"sql-syntax/arrays/#size_of_array","title":"SIZE_OF_ARRAY","text":"<p><code>SIZE_OF_ARRAY(array expr)</code></p> <p>Returns the size of array.</p> Example <code>SIZE_OF_ARRAY</code> usage <pre><code>SELECT id,\n    SIZE_OF_ARRAY(`Rentals`) AS test\nFROM `customers`;\n</code></pre>"},{"location":"sql-syntax/arrays/#sum_array","title":"SUM_ARRAY","text":"<p><code>SUM_ARRAY(array expr,[field])</code></p> <p>Sums the values in an array given an array field or sub-select and the field to sum.</p> Example <code>SUM_ARRAY</code> usage <pre><code>SELECT\n    SUM_ARRAY(`Rentals`, 'staffId') AS totalStaffIds\nFROM `customers`;\n</code></pre> Example <code>SUM_ARRAY</code> usage with a sub select <pre><code>SELECT id,\n    `First Name`,\n    `Last Name`,\n    SUM_ARRAY(\n        (SELECT\n            SUM_ARRAY(`Payments`, \u2018Amount\u2019) AS total\n        FROM `Rentals`), \u2018total\u2019) AS t\nFROM customers;\n</code></pre>"},{"location":"sql-syntax/arrays/#avg_array","title":"AVG_ARRAY","text":"<p><code>AVG_ARRAY(array expr,[field])</code></p> <p>Averages the values in an array given an array field or sub-select and the field to average.</p> Example <code>AVG_ARRAY</code> usage <pre><code>SELECT\n    AVG_ARRAY(`Rentals`, 'staffId') AS avgStaffIds\nFROM `customers`;\n</code></pre>"},{"location":"sql-syntax/arrays/#zip_array","title":"ZIP_ARRAY","text":"<p><code>ZIP_ARRAY(array expr,...)</code></p> <p>Transposes an array of input arrays so that the first element of the output array would be an array containing, the first element of the first input array, the first element of the second input array, etc.</p> Example <code>ZIP_ARRAY</code> usage <pre><code>SELECT id,\n    ZIP_ARRAY(\n        (SELECT `Film Title` AS `$$ROOT` FROM `Rentals`),ARRAY_RANGE(0,10,2)) AS test\nFROM `customers`;\n</code></pre>"},{"location":"sql-syntax/comparison-operators/","title":"Comparison Operators","text":"M-SQL Operator Description Example &gt; Greater than <code>select * from `films` where id &gt; 10select (id&gt;10) as exprVal from `films` </code> &lt; Less than <code>select * from `films` where id &lt; 10select (id&lt;10) as exprVal from `films` </code> = Equal to <code>select * from `films` where id = 10 select (id=10) as exprVal from `films`</code> &gt;= Greater than or equal to <code>select * from `films` where id &gt;= 10select (id&gt;=10) as exprVal from `films` </code> &lt;= Less than or equal to <code>select * from `films` where id &lt;= 10select (id&lt;=10) as exprVal from `films` </code> != Not equal to <code>select * from `films` where id != 10 select (id!=10) as exprVal from `films`</code> IS NOT NULL Is not null <code>select * from `films` where id IS NOT NULL </code> IS NULL Is null <code>select * from `films` where id IS NULL </code> LIKE String like, support standard %, case insensitive <code>select `First Name` as FName from `customers` where `First Name` Like 'M%' </code> GT Greater than <code>select GT(id,10) as exprVal from `films` </code> LT Less than <code>select LT(id,10) as exprVal from `films` </code> EQ Equal to <code>select EQ(id,10) as exprVal from `films`</code> GTE Greater than or equal to <code>select GTE(id,10) as exprVal from `films` </code> LTE Less than or equal to <code>select LTE(id,10) as exprVal from `films` </code> NE Not equal to <code>select NE(id,10) as exprVal from `films`</code> IN In a list of values <code>select * from `customers` where `Address.City` in ('Japan','Pakistan')</code> NOT IN Not in a list of values <code>select * from `customers` where `Address.City` NOT IN ('Japan','Pakistan')</code> CASE Case statement <code>select id,(case when id=3 then '1' when id=2 then '1' else 0 end) as test from customers</code>"},{"location":"sql-syntax/conversion-functions/","title":"Conversion Functions","text":"<p>Tip</p> <p>Literal types in <code>WHERE</code> clauses using conversion functions are converted     automatically e.g.:</p> <pre><code>SELECT \n    TO_DATE(date) AS d \n    FROM customers \nWHERE \n    TO_DATE(date) &gt; TO_DATE('2012-01-01')\n</code></pre> <p>NoQL will automatically convert the date value and result in the following:</p> <pre><code>{\"$expr\":{\"$gt\":[{\"$toDate\":\"$date\"},new Date(\"2012-01-01T00:00:00.000Z\")]}}\n</code></pre>"},{"location":"sql-syntax/conversion-functions/#supported-conversion-functions","title":"Supported Conversion Functions","text":""},{"location":"sql-syntax/conversion-functions/#convert","title":"CONVERT","text":"<p><code>CONVERT(expr,to)</code></p> <p>Converts the expression to the specified mongo type: <code>double</code>, <code>string</code>, <code>bool</code>, <code>date</code>, <code>int</code>, <code>objectId</code>, <code>long</code>, <code>decimal</code>s.</p> Example <code>CONVERT</code> usage <pre><code>SELECT \n    SUBTRACT(CONVERT(\u20181\u2019,\u2018int\u2019),ABS(`Replacement Cost`)) AS d,Title \nFROM \n    `films`\n</code></pre>"},{"location":"sql-syntax/conversion-functions/#ifnull","title":"IFNULL","text":"<p><code>IFNULL(expr,expr)</code></p> <p>Return the value if the expression is null.</p> Example <code>IFNULL</code> usage <pre><code>SELECT \n    IFNULL(id,1) AS `conv` \nFROM \n    `customers`\n</code></pre> Example using select without <code>FROM</code> clause for object generation <pre><code>SELECT \n    IFNULL(NULL,(select \u2018a\u2019 as val,1 as num)) AS `conv` \nFROM \n    `customers` \n</code></pre>"},{"location":"sql-syntax/conversion-functions/#to_bool","title":"TO_BOOL","text":"<p><code>TO_BOOL(expr)</code></p> <p>Convert the expression to a boolean.</p> Example <code>TO_BOOL</code> usage <pre><code>SELECT \n    TO_BOOL(\u2018true\u2019) AS `conv` \nFROM \n    `customers`\n</code></pre>"},{"location":"sql-syntax/conversion-functions/#to_date","title":"TO_DATE","text":"<p><code>TO_DATE(expr)</code></p> <p>Convert the expression to a date.</p> Example <code>TO_DATE</code> usage <pre><code>SELECT \n    TO_DATE(\u20182021-12-15T00:00:00Z\u2019) AS `conv` \nFROM \n    `customers`\n</code></pre>"},{"location":"sql-syntax/conversion-functions/#to_decimal","title":"TO_DECIMAL","text":"<p><code>TO_DECIMAL(expr)</code></p> <p>Convert the expression to a decimal.</p> Example <code>TO_DECIMAL</code> usage <pre><code>SELECT \n    TO_DECIMAL(\u2018123.35\u2019) AS `conv` \nFROM \n    `customers`\n</code></pre>"},{"location":"sql-syntax/conversion-functions/#to_double","title":"TO_DOUBLE","text":"<p><code>TO_DOUBLE(expr)</code></p> <p>Convert the expression to a double.</p> Example <code>TO_DOUBLE</code> usage <pre><code>SELECT\n     TO_DOUBLE(\u2018123.35\u2019) AS `conv` \nFROM \n    `customers`\n</code></pre>"},{"location":"sql-syntax/conversion-functions/#to_int","title":"TO_INT","text":"<p><code>TO_INT(expr)</code></p> <p>Convert the expression to an integer.</p> Example <code>TO_INT</code> usage <pre><code>SELECT \n    TO_INT(\u201812345\u2019) AS `conv` \nFROM \n    `customers`\n</code></pre>"},{"location":"sql-syntax/conversion-functions/#to_long","title":"TO_LONG","text":"<p><code>TO_LONG(expr)</code></p> <p>Convert the expression to a long.</p> Example <code>TO_LONG</code> usage <pre><code>SELECT \n    TO_LONG(\u20181234567891\u2019) AS `conv` \nFROM \n    `customers`\n</code></pre>"},{"location":"sql-syntax/conversion-functions/#to_string","title":"TO_STRING","text":"<p><code>TO_STRING(expr)</code></p> <p>Convert the expression to a string.</p> Example <code>TO_STRING</code> usage <pre><code>SELECT \n    TO_STRING(`id`) AS `conv` \nFROM \n    `customers`\n</code></pre>"},{"location":"sql-syntax/conversion-functions/#to_objectid","title":"TO_OBJECTID","text":"<p><code>TO_OBJECTID(expr)</code></p> <p>Convert the expression to a mongodb id.</p> Example <code>TO_OBJECTID</code> usage <pre><code>SELECT \n    TO_OBJECTID(`id`) AS `objId` \nFROM \n    `customers`\n</code></pre>"},{"location":"sql-syntax/conversion-functions/#typeof","title":"TYPEOF","text":"<p><code>TYPEOF(expr)</code></p> <p>Returns the mongo type of the expression.</p> Example <code>TYPEOF</code> usage <pre><code>SELECT \n    TYPEOF(id) AS `conv` \nFROM \n    `customers`\n</code></pre>"},{"location":"sql-syntax/conversion-functions/#casting","title":"Casting","text":"<p>NoQL supports cast operations with the following type mappings:</p> MySQL Type Mongo Type VARCHAR string DECIMAL decimal INT int DATETIME date TIME date FLOAT number CHAR string NCHAR string TEXT string Example casting usage <pre><code>SELECT CAST(1+`id` AS VARCHAR) AS `id` FROM `customers`\nSELECT CAST(abs(-1) AS VARCHAR) AS `id` FROM `customers`\nSELECT CAST('2021-01-01T00:00:00Z' AS DATE) as `id` FROM `customers`\n</code></pre>"},{"location":"sql-syntax/date-functions/","title":"Date Functions","text":""},{"location":"sql-syntax/date-functions/#supported-date-functions","title":"Supported Date Functions","text":""},{"location":"sql-syntax/date-functions/#current_date","title":"CURRENT_DATE","text":"<p><code>CURRENT_DATE()</code></p> <p>Returns the current date</p> <p>Example</p> <pre><code>SELECT\n    CURRENT_DATE() AS exprVal\nFROM `customers`\n</code></pre>"},{"location":"sql-syntax/date-functions/#date_from_iso_parts","title":"DATE_FROM_ISO_PARTS","text":"<p><code>DATE_FROM_ISO_PARTS(isoWeekYear, isoWeek, isoDayOfWeek, hour, second, minute, millisecond, timezone)</code></p> <p>Constructs and returns a Date object given the date\u2019s constituent ISO properties.</p> <p>Example</p> <pre><code>SELECT\n    DATE_FROM_ISO_PARTS(2017, 6, 3, null, null, null, null, null) AS exprVal\nFROM `customers`\n</code></pre>"},{"location":"sql-syntax/date-functions/#date_from_parts","title":"DATE_FROM_PARTS","text":"<p><code>DATE_FROM_PARTS(year, month, day, hour, second, minute, millisecond, timezone)</code></p> <p>Constructs and returns a Date object given the date\u2019s constituent properties.</p> <p>Example</p> <pre><code>SELECT\n    DATE_FROM_PARTS(2021, 11, 15, null, null, null, null, null) AS exprVal\nFROM `customers`\n</code></pre>"},{"location":"sql-syntax/date-functions/#date_from_string","title":"DATE_FROM_STRING","text":"<p><code>DATE_FROM_STRING(expr, format, timezone, onError, onNull)</code></p> <p>Converts a date/time string to a date object.</p> <p>Example</p> <pre><code>SELECT\n    DATE_FROM_STRING('2021-11-15T14:43:29.000Z', null, null) AS exprVal\nFROM `customers`\n</code></pre>"},{"location":"sql-syntax/date-functions/#date_to_parts","title":"DATE_TO_PARTS","text":"<p><code>DATE_TO_PARTS(expr, timezone, iso8601)</code></p> <p>Returns a document that contains the constituent parts of a given Date value.</p> <p>Example</p> <pre><code>SELECT\n    DATE_TO_PARTS(DATE_FROM_STRING('2021-11-15T14:43:29.000Z'), null, true) AS exprVal\nFROM `customers`\n</code></pre>"},{"location":"sql-syntax/date-functions/#date_to_string","title":"DATE_TO_STRING","text":"<p><code>DATE_TO_STRING(expr, format, timezone, onNull)</code></p> <p>Converts a date object to a string according to a user-specified format.</p> <p>Example</p> <pre><code>SELECT\n    DATE_TO_STRING(DATE_FROM_STRING('2021-11-15T14:43:29.000Z'), null, null) AS exprVal\nFROM `customers`\n</code></pre>"},{"location":"sql-syntax/date-functions/#day_of_month","title":"DAY_OF_MONTH","text":"<p><code>DAY_OF_MONTH(expr)</code></p> <p>Returns the day of the month for a date as a number between 1 and 31.</p> <p>Example</p> <pre><code>SELECT\n    DAY_OF_MONTH(DATE_FROM_STRING('2021-11-15')) AS exprVal\nFROM `customers`\n</code></pre>"},{"location":"sql-syntax/date-functions/#day_of_week","title":"DAY_OF_WEEK","text":"<p><code>DAY_OF_WEEK(expr)</code></p> <p>Returns the day of the week for a date as a number between 1 (Sunday) and 7 (Saturday).</p> <p>Example</p> <pre><code>SELECT\n    DAY_OF_WEEK(DATE_FROM_STRING('2021-11-15')) AS exprVal\nFROM `customers`\n</code></pre>"},{"location":"sql-syntax/date-functions/#day_of_year","title":"DAY_OF_YEAR","text":"<p><code>DAY_OF_YEAR(expr)</code></p> <p>Returns the day of the year for a date as a number between 1 and 366.</p> <p>Example</p> <pre><code>SELECT\n    DAY_OF_YEAR(DATE_FROM_STRING('2021-11-15')) AS exprVal\nFROM `customers`\n</code></pre>"},{"location":"sql-syntax/date-functions/#hour","title":"HOUR","text":"<p><code>HOUR(expr)</code></p> <p>Returns the hour portion of a date as a number between 0 and 23.</p> <p>Example</p> <pre><code>SELECT\n    HOUR(DATE_FROM_STRING('2021-11-15')) AS exprVal\nFROM `customers`\n</code></pre>"},{"location":"sql-syntax/date-functions/#iso_day_of_week","title":"ISO_DAY_OF_WEEK","text":"<p><code>ISO_DAY_OF_WEEK(expr)</code></p> <p>Returns the weekday number in ISO 8601 format, ranging from 1 (for Monday) to 7 (for Sunday).</p> <p>Example</p> <pre><code>SELECT\n    ISO_DAY_OF_WEEK(DATE_FROM_STRING('2021-11-15')) AS exprVal\nFROM `customers`\n</code></pre>"},{"location":"sql-syntax/date-functions/#iso_week","title":"ISO_WEEK","text":"<p><code>ISO_WEEK(expr)</code></p> <p>Returns the week number in ISO 8601 format, ranging from 1 to 53. Week numbers start at 1 with the week (Monday through Sunday) that contains the year\u2019s first Thursday.</p> <p>Example</p> <pre><code>SELECT\n    ISO_WEEK(DATE_FROM_STRING('2021-11-15')) AS exprVal\nFROM `customers`\n</code></pre>"},{"location":"sql-syntax/date-functions/#iso_week_year","title":"ISO_WEEK_YEAR","text":"<p><code>ISO_WEEK_YEAR(expr)</code></p> <p>Returns the year number in ISO 8601 format. The year starts with the Monday of week 1 and ends with the Sunday of the last week.</p> <p>Example</p> <pre><code>SELECT\n    ISO_WEEK_YEAR(DATE_FROM_STRING('2021-11-15')) AS exprVal\nFROM `customers`\n</code></pre>"},{"location":"sql-syntax/date-functions/#millisecond","title":"MILLISECOND","text":"<p><code>MILLISECOND(expr)</code></p> <p>Returns the millisecond portion of a date as an integer between 0 and 999.</p> <p>Example</p> <pre><code>SELECT\n    MILLISECOND(DATE_FROM_STRING('2021-11-15')) AS exprVal\nFROM `customers`\n</code></pre>"},{"location":"sql-syntax/date-functions/#minute","title":"MINUTE","text":"<p><code>MINUTE(expr)</code></p> <p>Returns the minute portion of a date as a number between 0 and 59.</p> <p>Example</p> <pre><code>SELECT\n    MINUTE(DATE_FROM_STRING('2021-11-15')) AS exprVal\nFROM `customers`\n</code></pre>"},{"location":"sql-syntax/date-functions/#month","title":"MONTH","text":"<p><code>MONTH(expr)</code></p> <p>Returns the month of a date as a number between 1 and 12.</p> <p>Example</p> <pre><code>SELECT\n    MONTH(DATE_FROM_STRING('2021-11-15')) AS exprVal\nFROM `customers`\n</code></pre>"},{"location":"sql-syntax/date-functions/#second","title":"SECOND","text":"<p><code>SECOND(expr)</code></p> <p>Returns the second portion of a date as a number between 0 and 59, but can be 60 to account for leap seconds.</p> <p>Example</p> <pre><code>SELECT\n    SECOND(DATE_FROM_STRING('2021-11-15')) AS exprVal\nFROM `customers`\n</code></pre>"},{"location":"sql-syntax/date-functions/#week","title":"WEEK","text":"<p><code>WEEK(expr)</code></p> <p>Returns the week of the year for a date as a number between 0 and 53.</p> <p>Example</p> <pre><code>SELECT\n    WEEK(DATE_FROM_STRING('2021-11-15')) AS exprVal\nFROM `customers`\n</code></pre>"},{"location":"sql-syntax/date-functions/#year","title":"YEAR","text":"<p><code>YEAR(expr)</code></p> <p>Returns the year portion of a date.</p> <p>Example</p> <pre><code>SELECT\n    YEAR(DATE_FROM_STRING('2021-11-15')) AS exprVal\nFROM `customers`\n</code></pre>"},{"location":"sql-syntax/date-functions/#extract","title":"EXTRACT","text":"<p><code>EXTRACT(period from expr)</code></p> <p>Extracts a portion of the date as per Postgres standard. Supported time periods: year, month, day, hour, minute, second, milliseconds, week, dow</p> <p>Example</p> <pre><code>SELECT\n    EXTRACT(year from orderDate) AS year\n    ,EXTRACT(month from orderDate) AS month\n    ,EXTRACT(day from TO_DATE('2021-10-23')) AS day\nFROM\n  orders\"\n</code></pre>"},{"location":"sql-syntax/date-functions/#date_add","title":"DATE_ADD","text":"<p><code>DATE_ADD(date, unit, amount, [timezone])</code></p> <p>Adds a specified time interval to a date.</p> Example <code>DATE_ADD</code> usage <pre><code>SELECT\n    id,\n    item,\n    orderDate as od1,\n    DATE_ADD(orderDate, 'hour', 2) as od2\nFROM orders\nWHERE id = 2\nLIMIT 1\n</code></pre> <p>You can also use the alias <code>DATEADD</code>:</p>"},{"location":"sql-syntax/date-functions/#date_subtract","title":"DATE_SUBTRACT","text":"<p><code>DATE_SUBTRACT(date, unit, amount, [timezone])</code></p> <p>Subtracts a specified time interval from a date.</p> Example <code>DATE_SUBTRACT</code> usage <pre><code>SELECT\n    id,\n    item,\n    orderDate as od1,\n    DATE_SUBTRACT(orderDate, 'hour', 2) as od2\nFROM orders\nWHERE id = 2\nLIMIT 1\n</code></pre> <p>You can also use the alias <code>DATESUBTRACT</code>:</p>"},{"location":"sql-syntax/date-functions/#date_diff","title":"DATE_DIFF","text":"<p><code>DATE_DIFF(startDate, endDate, unit, [timezone], [startOfWeek])</code></p> <p>Calculates the difference between two dates in the specified unit.</p> Example <code>DATE_DIFF</code> usage <pre><code>SELECT\n    id,\n    item,\n    orderDate,\n    CURRENT_DATE() as now,\n    DATE_DIFF(orderDate, DATE_ADD(orderDate, 'day', 2), 'day') as diff\nFROM orders\nWHERE id = 2\nLIMIT 1\n</code></pre> <p>You can also use the alias <code>DATEDIFF</code>:</p>"},{"location":"sql-syntax/date-functions/#date_trunc","title":"DATE_TRUNC","text":"<p><code>DATE_TRUNC(date, unit)</code></p> <p>Truncates a date to the specified unit of granularity.</p> Example <code>DATE_TRUNC</code> usage <pre><code>SELECT\n    orderDate,\n    DATE_TRUNC(orderDate, 'month') as monthStart,\n    DATE_TRUNC(orderDate, 'year') as yearStart\nFROM orders\nLIMIT 5\n</code></pre> <p>The <code>unit</code> parameter can be one of the following:</p> <ul> <li>'year'</li> <li>'quarter'</li> <li>'month'</li> <li>'week'</li> <li>'day'</li> <li>'hour'</li> <li>'minute'</li> <li>'second'</li> <li>'millisecond'</li> </ul> <p>This function is useful for grouping dates by a specific time unit or for finding the start of a time period.</p> Example <code>DATE_TRUNC</code> usage in grouping <pre><code>SELECT\n    DATE_TRUNC(orderDate, 'month') as monthStart,\n    COUNT(*) as orderCount\nFROM orders\nGROUP BY DATE_TRUNC(orderDate, 'month')\nORDER BY monthStart\n</code></pre> <p>This query groups orders by month and counts the number of orders in each month.</p>"},{"location":"sql-syntax/field-functions/","title":"Columns","text":""},{"location":"sql-syntax/field-functions/#supported-column-functions","title":"Supported Column Functions","text":""},{"location":"sql-syntax/field-functions/#unset","title":"UNSET","text":"<p><code>UNSET(fieldName)</code></p> <p>Unsets a field. Useful to remove _id from a result set. Does not require an alias</p> Example <code>UNSET</code> FIELD_EXISTS <pre><code>SELECT \n    UNSET(_id),\n    name \nFROM \n    `films` \n</code></pre>"},{"location":"sql-syntax/field-functions/#field_exists","title":"FIELD_EXISTS","text":"<p><code>FIELD_EXISTS(expr,true/false)</code></p> <p>Check if a field exists: FIELD_EXISTS(expr,true) or doesn't exist: FIELD_EXISTS(expr,false). Can only be used in where clauses and not as an expression.</p> Example <code>SUM</code> FIELD_EXISTS <pre><code>SELECT \n    * \nFROM \n    `films` \nWHERE FIELD_EXISTS(`id`,true)\n</code></pre>"},{"location":"sql-syntax/introduction/","title":"Introduction","text":"<p>NoQL aims to combine the ease of use and wide understanding of SQL Syntax with the power and flexibility of the MongoDB document model and aggregation pipeline.</p> <p>To achieve this, NoQL is a SQL to MongoDB interpreter that provides for standard SQL statements with some caveats.</p>"},{"location":"sql-syntax/introduction/#key-concepts","title":"Key Concepts","text":"<p>NoQL supports parsing of either MySQL or PostgreSQL syntax. </p> <p>NoQL follows the MongoDB requirements for fields and values including:</p> <ul> <li>Case-sensitive field names</li> <li>Case-sensitive and type exact field values</li> <li>Fields name cannot contain . or start with $</li> </ul>"},{"location":"sql-syntax/introduction/#documents","title":"Documents","text":"<p>NoQL supports the standard MongoDB query and aggregation notation for document navigation including:</p> <ul> <li>Dot notation for field traversal including arrays </li> <li>Operators for object and array field manipulation</li> </ul>"},{"location":"sql-syntax/introduction/#objects","title":"Objects","text":"<p>NoQL provides a shortcut syntax to selecting fields from objects using a sub-select without a where clause. See <code>Objects</code></p>"},{"location":"sql-syntax/introduction/#arrays","title":"Arrays","text":"<p>NoQL provides many methods for using arrays and functions by using a sub select with a where statement. See <code>Arrays</code></p>"},{"location":"sql-syntax/introduction/#joins","title":"Joins","text":"<p>NoQL currently supports complex inner and left outer joins with hints to simplify required output processing. See <code>Joins</code></p>"},{"location":"sql-syntax/introduction/#aliasing","title":"Aliasing","text":"<p>NoQL requires aliasing (<code>AS</code>) for functions and sub queries</p> Example <code>AS</code> usage <pre><code>SELECT \n    ABS(-1) AS `absId` \nFROM \n    `customers`\n</code></pre> <p>Using <code>AS</code> on a table requires prefixing</p> Example <code>AS</code> usage with a table with prefixing <pre><code>SELECT \n    c.* \nFROM \n    customers AS c\n</code></pre> <p>Always alias on <code>JOIN</code> statements</p>"},{"location":"sql-syntax/introduction/#indexing","title":"Indexing","text":"<p>Complex aggregation pipelines on large sets of data requires an understanding of how MongoDB is utilising indexes, especially on joins. We are working on an index suggestion tool to simplify this process.</p>"},{"location":"sql-syntax/joins/","title":"Joins","text":"<p>NoQL supports <code>INNER</code> and <code>OUTER</code> Joins, but does not unwind by default and the items are added as an array field.</p>"},{"location":"sql-syntax/joins/#join-hints","title":"Join Hints","text":"<p>There are several join hints to simplify document model joining:</p> <ul> <li>first</li> <li>last</li> <li>unwind</li> <li>optimize</li> </ul> <p>Join hints are added using a pipe <code>|</code> character to the join table or alias.</p> Example join hint <pre><code>--return the first item in the array\nSELECT\n     * \nFROM \n    orders \nINNER JOIN \n    `inventory` AS `inventory_docs|first` \nON sku=item\n</code></pre>"},{"location":"sql-syntax/joins/#first","title":"first","text":"<p>Returns the first element of the join result as an object on the result</p> Example <code>first</code> join hint <pre><code>--return the first item in the array\nSELECT\n     * \nFROM \n    orders \nINNER JOIN \n    `inventory` AS `inventory_docs|first` ON sku=item\n</code></pre>"},{"location":"sql-syntax/joins/#last","title":"last","text":"<p>Returns the last element of the join result as an object on the result</p> Example <code>last</code> join hint <pre><code>--take the last item of the array\nSELECT\n     * \nFROM \n    orders \nINNER JOIN \n    `inventory` AS `inventory_docs|last` ON sku=item\n</code></pre>"},{"location":"sql-syntax/joins/#unwind","title":"unwind","text":"<p>Unwinds the result into multiple records following the result of the join</p> Example <code>unwind</code> join hint <pre><code>--unwind the array to multiple documents\nSELECT \n    * \nFROM \n    orders \nINNER JOIN \n    `inventory` AS `inventory_docs|unwind` ON sku=item\n</code></pre>"},{"location":"sql-syntax/joins/#optimize","title":"optimize","text":"<p>The optimize hint is a current workaround to limit the result set for the $lookup when working with sub selects.</p> <p>The $match on sub query joins is applied after the subquery pipeline which can cause performance issues since indexes may not be used. It may be better to put the match before the pipeline to limit the input set depending on the on conditions.</p> Example <code>optimize</code> usage <pre><code>SELECT \n    c.*\n    ,cn.* \nFROM \n    customers c \nINNER JOIN\n    (SELECT * FROM `customer-notes` WHERE id&gt;2) `cn|optimize` \nON \n    cn.id=c.id\n</code></pre> <p>The on field must be part of the sub query select to be a valid optimization.</p>"},{"location":"sql-syntax/joins/#join-array-functions","title":"<code>JOIN</code> Array Functions","text":"<p>Alternatively the explicit array functions <code>FIRST_IN_ARRAY</code>, <code>LAST_IN_ARRAY</code>, <code>UNWIND</code> can be used instead of the join hints:</p> Example <code>FIRST_IN_ARRAY</code> usage <pre><code>--return the first item in the array\nSELECT \n    *\n    ,FIRST_IN_ARRAY(inventory) AS inventory_docs \nFROM \n    orders \nINNER JOIN `inventory` ON sku=item\n</code></pre> Example <code>LAST_IN_ARRAY</code> usage <pre><code>--take the last item of the array\nSELECT *\n    ,LAST_IN_ARRAY(inventory) AS inventory_docs \nFROM orders \nINNER JOIN \n    `inventory` ON sku=item\n</code></pre> Example <code>UNWIND</code> usage <pre><code>--unwind the array to multiple documents\nSELECT \n    *\n    ,UNWIND(inventory) AS inventory_docs \nFROM\n    orders\nINNER JOIN \n    `inventory` ON sku=item\n</code></pre>"},{"location":"sql-syntax/joins/#caveats","title":"Caveats","text":"<p>An <code>IN</code> sub-select on a <code>WHERE</code> clause does not work as a join. Use a join instead.</p> Example <code>IN</code> sub-select. This won't work. <pre><code>    --Won't Work\n    SELECT \n        *, inventory_docs\n    FROM \n        orders\n    WHERE \n        inventory_docs IN \n        (SELECT \n            * FROM inventory\n        WHERE \n            sku= orders.item\n        )\n</code></pre> Using <code>JOIN</code> instead of <code>IN</code> sub-select <pre><code>--use join instead\nSELECT\n     *\nFROM\n     orders\nINNER JOIN\n    inventory inventory_docs ON sku=item\n</code></pre>"},{"location":"sql-syntax/limits-and-offsets/","title":"Limit and Offset","text":"<p>NoQL supports MySQL and PostgresQL style limits and offsets that equates to <code>limit</code> and <code>skip</code> in MongoDB. For example:</p> Using <code>LIMIT</code> and <code>OFFSET</code> <pre><code>SELECT \n    (SELECT * FROM Rentals) AS t \nFROM \n    `customers` \nLIMIT 10 OFFSET 2\n</code></pre>"},{"location":"sql-syntax/mathematical-functions/","title":"Mathematical Functions","text":""},{"location":"sql-syntax/mathematical-functions/#supported-mathematical-functions","title":"Supported Mathematical Functions","text":""},{"location":"sql-syntax/mathematical-functions/#avg","title":"AVG","text":"<p><code>AVG(expr,expr,...)</code></p> <p>Returns the average of a set of values.</p> Example <code>AVG</code> usage <pre><code>SELECT\n    AVG(`Replacement Cost`,`id`) AS exprVal \nFROM \n    `films` \n</code></pre>"},{"location":"sql-syntax/mathematical-functions/#abs","title":"ABS","text":"<p><code>ABS(expr)</code></p> <p>Returns the absolute value of a number.</p> Example <code>ABS</code> usage <pre><code>SELECT \n    ABS(`Replacement Cost`) AS exprVal \nFROM \n    `films` \n</code></pre>"},{"location":"sql-syntax/mathematical-functions/#acos","title":"ACOS","text":"<p><code>ACOS(expr)</code></p> <p>Returns the inverse cosine (arc cosine) of a value.</p> Example <code>ACOS</code> usage <pre><code>SELECT \n    ACOS(`Replacement Cost`) AS exprVal \nFROM \n    `films` \n</code></pre>"},{"location":"sql-syntax/mathematical-functions/#acosh","title":"ACOSH","text":"<p><code>ACOSH(expr)</code></p> <p>Returns the inverse hyperbolic cosine (hyperbolic arc cosine) of a value.</p> Example <code>ACOSH</code> usage <pre><code>SELECT \n    ACOSH(`Replacement Cost`) AS exprVal\nFROM \n    `films`  \n</code></pre>"},{"location":"sql-syntax/mathematical-functions/#asin","title":"ASIN","text":"<p><code>ASIN(expr)</code></p> <p>Returns the inverse sine (arc sine) of a value.</p> Example <code>ASIN</code> usage <pre><code>SELECT \n    ASIN(`Replacement Cost`) AS exprVal \nFROM \n    `films`  \n</code></pre>"},{"location":"sql-syntax/mathematical-functions/#asinh","title":"ASINH","text":"<p><code>ASINH(expr)</code></p> <p>Returns the inverse hyperbolic sine (hyperbolic arc sine) of a value.</p> Example <code>ASINH</code> usage <pre><code>SELECT \n    ASINH(`Replacement Cost`) AS exprVal \nFROM \n    `films`  \n</code></pre>"},{"location":"sql-syntax/mathematical-functions/#atan","title":"ATAN","text":"<p><code>ATAN(expr)</code></p> <p>Returns the inverse tangent (arc tangent) of a value.</p> Example <code>ATAN</code> usage <pre><code>SELECT \n    ATAN(`Replacement Cost`) AS exprVal \nFROM \n    `films`\n</code></pre>"},{"location":"sql-syntax/mathematical-functions/#atan2","title":"ATAN2","text":"<p><code>ATAN2(y,x)</code></p> <p>Returns the inverse tangent (arc tangent) of y / x, where y and x are the first and second values passed to the expression respectively.</p> Example <code>ATAN2</code> usage <pre><code>SELECT \n    ATAN2(3,4) AS exprVal\nFROM \n    `films`  \n</code></pre>"},{"location":"sql-syntax/mathematical-functions/#atanh","title":"ATANH","text":"<p><code>ATANH(expr)</code></p> <p>Returns the inverse hyperbolic tangent (hyperbolic arc tangent) of a value.</p> Example <code>ATANH</code> usage <pre><code>SELECT \n    ATANH(`Replacement Cost`) AS exprVal \nFROM \n    `films`  \n</code></pre>"},{"location":"sql-syntax/mathematical-functions/#binary_size","title":"BINARY_SIZE","text":"<p><code>BINARY_SIZE(expr)</code></p> <p>Returns the byte size of the expression.</p> Example <code>BINARY_SIZE</code> usage <pre><code>SELECT\n    id\n    ,BINARY_SIZE(`First Name`) as exprVal \nFROM \n    `customers` \n</code></pre>"},{"location":"sql-syntax/mathematical-functions/#ceil","title":"CEIL","text":"<p><code>CEIL(expr)</code></p> <p>Returns the smallest integer greater than or equal to the specified number.</p> Example <code>CEIL</code> usage <pre><code>SELECT \n    CEIL(`Replacement Cost`, 1) AS exprVal \nFROM \n    `films`  \n</code></pre>"},{"location":"sql-syntax/mathematical-functions/#degrees_to_radians","title":"DEGREES_TO_RADIANS","text":"<p><code>DEGREES_TO_RADIANS(expr)</code></p> <p>Converts an input value measured in degrees to radians.</p> Example <code>DEGREES_TO_RADIANS</code> usage <pre><code>SELECT \n    DEGREES_TO_RADIANS(300) AS exprVal \nFROM \n    `films` \n</code></pre>"},{"location":"sql-syntax/mathematical-functions/#divide","title":"DIVIDE","text":"<p><code>DIVIDE(expr,expr)</code></p> <p>Divides one number by another and returns the result.</p> Example <code>DIVIDE</code> usage <pre><code>SELECT \n    DIVIDE(`Replacement Cost`,10) AS exprVal \nFROM \n    `films`  \n</code></pre>"},{"location":"sql-syntax/mathematical-functions/#exp","title":"EXP","text":"<p><code>EXP(expr)</code></p> <p>Raises Euler's number (i.e. e ) to the specified exponent and returns the result.</p> Example <code>EXP</code> usage <pre><code>SELECT \n    EXP(`Replacement Cost`, 1) As exprVal \nFROM \n    `films` \n</code></pre>"},{"location":"sql-syntax/mathematical-functions/#floor","title":"FLOOR","text":"<p><code>FLOOR(expr)</code></p> <p>Returns the largest integer less than or equal to the specified number.</p> Example <code>FLOOR</code> usage <pre><code>SELECT \n    FLOOR(`Replacement Cost`) AS exprVal \nFROM \n    `films` \n</code></pre>"},{"location":"sql-syntax/mathematical-functions/#ln","title":"LN","text":"<p><code>LN(expr)</code></p> <p>Calculates the natural logarithm ln (i.e log e) of a number and returns the result as a double.</p> Example <code>LN</code> usage <pre><code>SELECT \n    LN(`Replacement Cost`) AS exprVal \nFROM \n    `films` \n</code></pre>"},{"location":"sql-syntax/mathematical-functions/#log","title":"LOG","text":"<p><code>LOG(number,base)</code></p> <p>Calculates the log of a number in the specified base and returns the result as a double.</p> Example <code>LOG</code> usage <pre><code>SELECT \n    LOG(`Replacement Cost`,10) AS exprVal \nFROM \n    `films` \n</code></pre>"},{"location":"sql-syntax/mathematical-functions/#log10","title":"LOG10","text":"<p><code>LOG10(expr)</code></p> <p>Calculates the log base 10 of a number and returns the result as a double.</p> Example <code>LOG10</code> usage <pre><code>SELECT \n    LOG10(`Replacement Cost`) AS exprVal \nFROM \n    `films`  \n</code></pre>"},{"location":"sql-syntax/mathematical-functions/#max","title":"MAX","text":"<p><code>MAX(expr,expr,...)</code></p> <p>Returns the max of a set of numbers.</p> Example <code>MAX</code> usage <pre><code>SELECT \n    MAX(`Replacement Cost`,10) AS exprVal \nFROM \n    `films` \n</code></pre>"},{"location":"sql-syntax/mathematical-functions/#min","title":"MIN","text":"<p><code>MIN(xpr,expr,...)</code></p> <p>Returns the min of a set of numbers.</p> Example <code>MIN</code> usage <pre><code>SELECT \n    MIN(`Replacement Cost`,10) AS exprVal\nFROM \n    `films` \n</code></pre>"},{"location":"sql-syntax/mathematical-functions/#mod","title":"MOD","text":"<p><code>MOD(expr,expr)</code></p> <p>Divides one number by another and returns the remainder.</p> Example <code>MOD</code> usage <pre><code>SELECT \n    MOD(`Replacement Cost`,10) AS exprVal \nFROM \n    `films`\n</code></pre>"},{"location":"sql-syntax/mathematical-functions/#multiply","title":"MULTIPLY","text":"<p><code>MULTIPLY(expr,expr,...)</code></p> <p>Multiplies numbers together and returns the result.</p> Example <code>MULTIPLY</code> usage <pre><code>SELECT \n    MULTIPLY(`Replacement Cost`,10) AS exprVal\nFROM\n    `films`\n</code></pre>"},{"location":"sql-syntax/mathematical-functions/#pow","title":"POW","text":"<p><code>POW(expr,exponent)</code></p> <p>Raises a number to the specified exponent and returns the result.</p> Example <code>POW</code> usage <pre><code>SELECT \n    POW(`Replacement Cost`,10) AS exprVal \nFROM \n    `films` \n</code></pre>"},{"location":"sql-syntax/mathematical-functions/#radians_to_degrees","title":"RADIANS_TO_DEGREES","text":"<p><code>RADIANS_TO_DEGREES(expr)</code></p> <p>Converts an input value measured in radians to degrees.</p> Example <code>RADIANS_TO_DEGREES</code> usage <pre><code>SELECT \n    RADIANS_TO_DEGREES(0.5) AS exprVal \nFROM \n    `films` \n</code></pre>"},{"location":"sql-syntax/mathematical-functions/#rand","title":"RAND","text":"<p><code>RAND()</code></p> <p>Returns a random float between 0 and 1 each time it is called.</p> Example <code>RAND</code> usage <pre><code>SELECT \n    RAND() AS exprVal \nFROM \n    `films`  \n</code></pre>"},{"location":"sql-syntax/mathematical-functions/#round","title":"ROUND","text":"<p><code>ROUND(expr,[places])</code></p> <p>Rounds a number to a whole integer or to a specified decimal place.</p> Example <code>ROUND</code> usage <pre><code>SELECT \n    ROUND(`Replacement Cost`,1) AS exprVal\nFROM \n    `films`  \n</code></pre>"},{"location":"sql-syntax/mathematical-functions/#sin","title":"SIN","text":"<p><code>SIN(expr)</code></p> <p>Returns the sine of a value that is measured in radians.</p> Example <code>SIN</code> usage <pre><code>SELECT \n    SIN(90) AS exprVal \nFROM \n    `films`  \n</code></pre>"},{"location":"sql-syntax/mathematical-functions/#sinh","title":"SINH","text":"<p><code>SINH(expr)</code></p> <p>Returns the hyperbolic sine of a value that is measured in radians.</p> Example <code>SINH</code> usage <pre><code>SELECT \n    SINH(90) AS exprVal \nFROM \n    `films`  \n</code></pre>"},{"location":"sql-syntax/mathematical-functions/#sqrt","title":"SQRT","text":"<p><code>SQRT(expr)</code></p> <p>Calculates the square root of a positive number and returns the result as a double.</p> Example <code>SQRT</code> usage <pre><code>SELECT \n    SQRT(`id`) AS exprVal \nFROM \n    `films`  \n</code></pre>"},{"location":"sql-syntax/mathematical-functions/#subtract","title":"SUBTRACT","text":"<p><code>SUBTRACT(expr,expr)</code></p> <p>Subtracts two numbers to return the difference, or two dates to return the difference in milliseconds, or a date and a number in milliseconds to return the resulting date.</p> Example <code>SUBTRACT</code> usage <pre><code>SELECT \n    SUBTRACT(10,`id`) AS exprVal \nFROM \n    `films` \n</code></pre>"},{"location":"sql-syntax/mathematical-functions/#sum","title":"SUM","text":"<p><code>SUM(expr,expr,...)</code></p> <p>Sums the values provided in the expression.</p> Example <code>SUM</code> usage <pre><code>SELECT \n    SUM(`Replacement Cost`,2,id) AS s \nFROM \n    `films`  \n</code></pre>"},{"location":"sql-syntax/mathematical-functions/#tan","title":"TAN","text":"<p><code>TAN(expr)</code></p> <p>Returns the tangent of a value that is measured in radians.</p> Example <code>TAN</code> usage <pre><code>SELECT \n    TAN(90) AS exprVal \nFROM \n    `films`  \n</code></pre>"},{"location":"sql-syntax/mathematical-functions/#tanh","title":"TANH","text":"<p><code>TANH(expr)</code></p> <p>Returns the hyperbolic tangent of a value that is measured in radians.</p> Example <code>TANH</code> usage <pre><code>SELECT \n    TANH(90) AS exprVal \nFROM \n    `films`  \n</code></pre>"},{"location":"sql-syntax/mathematical-functions/#trunc","title":"TRUNC","text":"<p><code>TRUNC(expr,[places])</code></p> <p>Truncates a number to a whole integer or to a specified decimal place.</p> Example <code>TRUNC</code> usage <pre><code>SELECT \n    TRUNC(`Replacement Cost`, 1) AS exprVal \nFROM \n    `films`\n</code></pre>"},{"location":"sql-syntax/mathematical-operators/","title":"Mathematical Operators","text":"M-SQL Operator Description + Addition operator adds 2 numbers or dates. Does not work on strings  <code>select `Replacement Cost` + id + Length as exprVal from `films`</code> - Subtraction operator subtracts 2 numbers or dates. Does not work on strings  <code>select `Replacement Cost` - id - Length as exprVal from `films`</code> / Division operator divides 2 numbers or dates. Does not work on strings  <code>select `Replacement Cost` / id as exprVal from `films`</code> * Multiplication operator multiplies 2 numbers or dates. Does not work on strings  <code>select `Replacement Cost` *id* Length as exprVal from `films`</code> % Modulus operator  <code>select `id` % Length as exprVal from `films`</code>"},{"location":"sql-syntax/objects/","title":"Objects","text":""},{"location":"sql-syntax/objects/#root","title":"$$ROOT","text":"<p>Specifying <code>$$ROOT</code> as a column alias sets the value to root object but only works with aggregates (unless contained in array sub select). This is useful when you want to return the root object as a column.</p> Example <code>$$ROOT</code> usage <pre><code>SELECT\n    t AS `$$ROOT`\nFROM\n    (\n    SELECT\n        id\n        ,`First Name`\n        ,`Last Name`\n        ,LENGTHOFARRAY(Rentals,'id')  AS numRentals\n    FROM customers)\nAS t\n</code></pre>"},{"location":"sql-syntax/objects/#merge-fields-into-object","title":"Merge Fields into Object","text":"<p>Only available in aggregates. Use a <code>SELECT</code> without specifying a table to create a new object.</p> Creating a new object <pre><code>SELECT\n    (SELECT id,`First Name` AS Name) AS t\nFROM\n    customers\n</code></pre> <p>Create a new Object and assign to root</p> Creating a new object and assigning to root <pre><code>SELECT\n    (SELECT id,`First Name` AS Name) AS t1\n    ,(SELECT id,`Last Name` AS LastName) AS t2\n    ,MERGE_OBJECTS(t1,t2) AS `$$ROOT`\nFROM\n    customers\n</code></pre>"},{"location":"sql-syntax/objects/#supported-object-functions","title":"Supported Object Functions","text":""},{"location":"sql-syntax/objects/#parse_json","title":"PARSE_JSON","text":"<p><code>PARSE_JSON(expr)</code></p> <p>Parses the JSON string. Use in conjunction with <code>ARRAY_TO_OBJECT</code> to convert an array to an object.</p> Example <code>PARSE_JSON</code> usage <pre><code>SELECT\n    id,\n    ARRAY_TO_OBJECT(PARSE_JSON('[{\"k\":\"val\",\"v\":1}]')) AS test\nFROM `customers`;\n</code></pre>"},{"location":"sql-syntax/objects/#merge_objects","title":"MERGE_OBJECTS","text":"<p><code>MERGE_OBJECTS(expr)</code></p> Example <code>MERGE_OBJECTS</code> usage <pre><code>SELECT\n    id,\n    MERGE_OBJECTS(`Address`,PARSE_JSON('{\"val\":1}')) AS test\nFROM `customers`;\n</code></pre> Example <code>MERGE_OBJECTS</code> usage with sub select <pre><code>SELECT\n    id,\n    MERGE_OBJECTS(`Address`,(SELECT 1 AS val)) AS test\nFROM `customers`;\n</code></pre>"},{"location":"sql-syntax/objects/#empty_object","title":"EMPTY_OBJECT","text":"<p><code>EMPTY_OBJECT()</code></p> <p>Creates an empty object.</p> Example <code>EMPTY_OBJECT</code> usage <pre><code>SELECT\n    id,\n    EMPTY_OBJECT() AS emptyObj,\n    MERGE_OBJECTS(EMPTY_OBJECT(), `Address`) AS filledObj\nFROM `customers`;\n</code></pre> Example <code>EMPTY_OBJECT</code> usage in a condition <pre><code>SELECT\n    id,\n    `Address`,\n    CASE\n        WHEN `Address` = EMPTY_OBJECT() THEN 'No Address'\n        ELSE 'Has Address'\n    END AS addressStatus\nFROM `customers`;\n</code></pre>"},{"location":"sql-syntax/objects/#flatten","title":"FLATTEN","text":"<p><code>FLATTEN(field, prefix)</code></p> <p>Flattens an object into a set of fields. You can optionally add a</p> Example <code>FLATTEN</code> usage <p><code>``sql'    SELECT        id,        FLATTEN(</code>address<code>,'addr_')    FROM</code>customers`; <pre><code>???+ example \"Example `FLATTEN` usage with unset\"\n\n```sql'\n   SELECT\n       id,\n       FLATTEN(`address`,'addr_',true)\n   FROM `customers`;\n</code></pre></p> <p>Will remove the <code>address</code> field from the output and will only have the <code>addr_</code> prefixed fields.</p>"},{"location":"sql-syntax/order-by-clause/","title":"Order By Clause","text":"<p>An <code>ORDER BY</code> clause requires the order field to be part of the <code>SELECT</code> statement</p> Correct <pre><code>SELECT \n    `Address.City` AS City, ABS(`id`) AS absId \nFROM \n    `customers` \nWHERE \n    `First Name` LIKE 'm%' AND ABS(`id`) &gt; 1 \nORDER BY absId\n</code></pre> Incorrect <pre><code>SELECT \n    `Address.City` AS City \nFROM \n    `customers` \nWHERE \n    `First Name` LIKE 'm%' AND ABS(`id`) &gt; 1 \nORDER BY ABS(`id`)    \n</code></pre>"},{"location":"sql-syntax/pivot-unpivot/","title":"Pivot and Unpivot Operations","text":""},{"location":"sql-syntax/pivot-unpivot/#pivot","title":"PIVOT","text":"<p>The <code>PIVOT</code> operation allows you to transform rows into columns, creating a cross-tabular format. In NoQL, the PIVOT operation is specified as a hint on the subquery.</p> Example <code>PIVOT</code> usage <pre><code>SELECT 'AverageCost' as CostSortedByProductionDays,\n        \"0\",\n        \"1\",\n        \"2\",\n        \"3\",\n        \"4\"\nFROM (\n    SELECT DaysToManufacture,\n           StandardCost\n    FROM Production_Product\n    GROUP BY DaysToManufacture, StandardCost\n    ORDER BY DaysToManufacture, StandardCost\n) 'pvt|pivot([avg(StandardCost) as AverageCost],DaysToManufacture,[0,1,2,3,4])'\n</code></pre> <p>The PIVOT hint has the following format: <code>'pvt|pivot([aggregate_function(column) as alias], pivot_column, [pivot_values])'</code></p> <ul> <li><code>aggregate_function(column) as alias</code>: Specifies the aggregation to be performed and the alias for the result.</li> <li><code>pivot_column</code>: The column whose values will become new columns.</li> <li><code>pivot_values</code>: An array of values from the pivot column that will become new columns.</li> </ul>"},{"location":"sql-syntax/pivot-unpivot/#unpivot","title":"UNPIVOT","text":"<p>The <code>UNPIVOT</code> operation is the reverse of <code>PIVOT</code>. It transforms columns into rows, converting a cross-tabular format back into a normalized form. In NoQL, the UNPIVOT operation is also specified as a hint on the subquery.</p> Example <code>UNPIVOT</code> usage <pre><code>SELECT VendorID, Employee, Orders\nFROM (\n    SELECT VendorID, Emp1, Emp2, Emp3, Emp4, Emp5, unset(_id)\n    FROM pvt\n) 'unpvt|unpivot(Orders,Employee,[Emp1, Emp2, Emp3, Emp4, Emp5])'\nORDER BY VendorID, Employee\n</code></pre> <p>The UNPIVOT hint has the following format: <code>'unpvt|unpivot(value_column, name_column, [column_list])'</code></p> <ul> <li><code>value_column</code>: The name of the new column that will contain the unpivoted values.</li> <li><code>name_column</code>: The name of the new column that will contain the names of the original columns.</li> <li><code>column_list</code>: An array of column names to be unpivoted.</li> </ul> <p>Multiple UNPIVOT operations can be chained using the pipe (<code>|</code>) character:</p> Example of multiple <code>UNPIVOT</code> operations <pre><code>SELECT SalesID,\nROW_NUMBER() OVER (\n        ORDER BY OrderName\n    ) OrderNum,\nOrderName,\nOrderDate,\nOrderAmt\nFROM (\n    SELECT SalesID, Order1Name, Order2Name, Order1Date, Order2Date, Order1Amt, Order2Amt, unset(_id)\n    FROM multiple-unpivot\n) 'unpvt|unpivot(OrderName,OrderNames,[Order1Name, Order2Name])|unpivot(OrderDate,OrderDates,[Order1Date, Order2Date])|unpivot(OrderAmt,OrderAmts,[Order1Amt, Order2Amt])'\n</code></pre> <p>Note: The exact capabilities and performance of <code>PIVOT</code> and <code>UNPIVOT</code> operations may depend on the specific implementation in NoQL and the underlying MongoDB version.</p>"},{"location":"sql-syntax/string-functions/","title":"Strings","text":"<p>Note</p> <p><code>+</code> (str + str) does not work for string concatenation. Use <code>CONCAT</code> instead.</p>"},{"location":"sql-syntax/string-functions/#like","title":"LIKE","text":"<p><code>LIKE '%%'</code></p> <p>Provides string match functionality with support for standard % notation. Case insensitive.</p> Example <code>LIKE</code> usage <pre><code>SELECT\n    *\nFROM\n    `customers`\nWHERE\n  name LIKE 'john%';\n</code></pre>"},{"location":"sql-syntax/string-functions/#not-like","title":"NOT LIKE","text":"<p><code>NOT LIKE '%%'</code></p> <p>Provides string non match functionality with support for standard % notation. Case insensitive.</p> Example <code>NOT LIKE</code> usage <pre><code>SELECT\n    *\nFROM\n    `customers`\nWHERE\n  name NOT LIKE 'john%';\n</code></pre>"},{"location":"sql-syntax/string-functions/#supported-string-functions","title":"Supported String Functions","text":""},{"location":"sql-syntax/string-functions/#concat","title":"CONCAT","text":"<p><code>CONCAT(expr,expr,expr...)</code></p> <p>Concatenates strings.</p> Example <code>CONCAT</code> usage <pre><code>SELECT\n    CONCAT(`First Name`,\u2018:\u2019,`Last Name`) AS exprVal\nFROM\n    `customers`;\n</code></pre>"},{"location":"sql-syntax/string-functions/#join","title":"JOIN","text":"<p><code>JOIN(expr,separator)</code></p> <p>Joins the field that is an array of strings using the separator string.</p> Example <code>JOIN</code> usage <pre><code>SELECT\n    JOIN(`Addresses`,\u2018,\u2019) AS fullAddress\nFROM\n    `customers`;\n</code></pre>"},{"location":"sql-syntax/string-functions/#trim","title":"TRIM","text":"<p><code>TRIM(expr,[chars])</code></p> <p>Trims the string</p> Example <code>TRIM</code> usage <pre><code>SELECT\n    TRIM(`First Name`,\u2018_ -\u2018) AS exprVal\nFROM\n    `customers`;\n</code></pre>"},{"location":"sql-syntax/string-functions/#ltrim","title":"LTRIM","text":"<p><code>LTRIM(expr,[chars])</code></p> <p>Left trims the string</p> Example <code>LTRIM</code> usage <pre><code>SELECT\n    LTRIM(`First Name`,\u2018_ -\u2018) AS exprVal\nFROM\n    `customers`;\n</code></pre>"},{"location":"sql-syntax/string-functions/#rtrim","title":"RTRIM","text":"<p><code>RTRIM(expr,[chars])</code></p> <p>Right trims the string</p> Example <code>RTRIM</code> usage <pre><code>SELECT\n    RTRIM(`First Name`,\u2018_ -\u2018) AS exprVal\nFROM\n    `customers`;\n</code></pre>"},{"location":"sql-syntax/string-functions/#substr","title":"SUBSTR","text":"<p><code>SUBSTR(expr,start,length)</code></p> <p>Returns the substring of a string.</p> Example <code>SUBSTR</code> usage <pre><code>SELECT\n    SUBSTR(`First Name`,1,10) AS exprVal\nFROM\n    `customers`;\n</code></pre>"},{"location":"sql-syntax/string-functions/#substr_bytes","title":"SUBSTR_BYTES","text":"<p><code>SUBSTR_BYTES(expr,start,length)</code></p> <p>Returns the substring of a string by bytes.</p> Example <code>SUBSTR_BYTES</code> usage <pre><code>SELECT\n    SUBSTR_BYTES(`First Name`,1,10) AS exprVal\nFROM\n    `customers`;\n</code></pre>"},{"location":"sql-syntax/string-functions/#replace","title":"REPLACE","text":"<p><code>REPLACE(expr,find,replace)</code></p> <p>Replaces the first instance of a search string in an input string with a replacement string.</p> Example <code>REPLACE</code> usage <pre><code>SELECT\n    REPLACE(`First Name`,\u2018a\u2019,\u2018b\u2019) AS exprVal\nFROM\n    `customers`;\n</code></pre>"},{"location":"sql-syntax/string-functions/#replace_all","title":"REPLACE_ALL","text":"<p><code>REPLACE_ALL(expr,find,replace)</code></p> <p>Replaces all instances of a search string in an input string with a replacement string.</p> Example <code>REPLACE_ALL</code> usage <pre><code>SELECT\n    REPLACE_ALL(`First Name`,\u2018a\u2019,\u2018b\u2019) AS exprVal\nFROM\n    `customers`;\n</code></pre>"},{"location":"sql-syntax/string-functions/#strlen","title":"STRLEN","text":"<p><code>STRLEN(expr)</code></p> <p>Returns the number of UTF-8 encoded bytes in the specified string.</p> Example <code>STRLEN</code> usage <pre><code>SELECT\n    STRLEN(`First Name`)  AS exprVal\nFROM\n    `customers`;\n</code></pre>"},{"location":"sql-syntax/string-functions/#strlen_cp","title":"STRLEN_CP","text":"<p><code>STRLEN_CP(expr)</code></p> <p>Returns the number of UTF-8 code points in the specified string.</p> Example <code>STRLEN_CP</code> usage <pre><code>SELECT\n    STRLEN_CP(`First Name`)  AS exprVal\nFROM\n    `customers`;\n</code></pre>"},{"location":"sql-syntax/string-functions/#split","title":"SPLIT","text":"<p><code>SPLIT(expr,delimiter)</code></p> <p>Splits the string to an array.</p> Example <code>SPLIT</code> usage <pre><code>SELECT\n    SPLIT(`First Name`,\u2018,\u2019) AS exprVal\nFROM\n    `customers`;\n</code></pre>"},{"location":"sql-syntax/string-functions/#strpos","title":"STRPOS","text":"<p><code>STRPOS(expr,substr)</code></p> <p>Finds the first index of the substring within the expression. Returns 0 if not found and 1 based index position as per PostgresQL.</p> Example <code>STRPOS</code> usage <pre><code>SELECT\n    STRPOS(Title,'B') as pos,filmId\nFROM\n    films\nWHERE\n    STRPOS(Title,'B') &gt; 0;\n</code></pre>"},{"location":"sql-syntax/string-functions/#locate","title":"LOCATE","text":"<p><code>LOCATE(expr,substr)</code></p> <p>Finds the first index of the substring within the expression. Returns 0 if not found and 1 based index position as per MySQL.</p> Example <code>LOCATE</code> usage <pre><code>SELECT\n    LOCATE(Title,'B') as pos,filmId\nFROM\n    films\nWHERE\n    LOCATE(Title,'B') &gt; 0;\n</code></pre>"},{"location":"sql-syntax/string-functions/#left","title":"LEFT","text":"<p><code>LEFT(expr, length)</code></p> <p>Returns the leftmost characters from the expression.</p> Example <code>LEFT</code> usage <pre><code>SELECT\n    LEFT(`First Name`, 3) AS firstThreeChars\nFROM `customers`;\n</code></pre>"},{"location":"sql-syntax/string-functions/#starts_with","title":"STARTS_WITH","text":"<p><code>STARTS_WITH(expr, prefix)</code></p> <p>Returns true if the expression starts with the specified prefix.</p> Example <code>STARTS_WITH</code> usage <pre><code>SELECT\n    id,\n    `First Name`,\n    STARTS_WITH(`First Name`, 'Jo') AS startsWithJo\nFROM `customers`;\n</code></pre>"},{"location":"sql-syntax/string-functions/#wrap_param","title":"WRAP_PARAM","text":"<p><code>WRAP_PARAM(expr, [forceString])</code></p> <p>Wraps a parameter, typically used for handling special characters or ensuring correct interpretation of a string.</p> Example <code>WRAP_PARAM</code> usage <pre><code>SELECT\n    WRAP_PARAM('Hello, \"World\"!') as wrappedString,\n    WRAP_PARAM(42, true) as wrappedNumber\nFROM\n    `customers`\nLIMIT 1\n</code></pre> <p>In this example, <code>WRAP_PARAM</code> ensures that the string with quotes is properly handled, and when <code>forceString</code> is set to true, it forces the number to be treated as a string.</p>"},{"location":"sql-syntax/union/","title":"Union","text":"<p>NoQL supports UNION and UNION ALL.</p> Example <code>UNION</code> usage <pre><code>SELECT * FROM top_rated_films\nUNION\nSELECT * FROM most_popular_films;\n</code></pre> Example <code>UNION ALL</code> usage <pre><code>SELECT * FROM top_rated_films\nUNION ALL\nSELECT * FROM most_popular_films;\n</code></pre> <p>Unions can be used in sub queries.</p>"},{"location":"sql-syntax/where-clause/","title":"<code>WHERE</code> Clauses","text":"<p><code>WHERE</code> clauses are used to filter the results of a query. They are used in the same way as in SQL.</p> <p>Functions in <code>WHERE</code> clauses require explicit definition and can't use a computed field</p> Correct function and <code>WHERE</code> clause usage <pre><code>--Correct\nSELECT \n    `Address.City` AS City\n    ,ABS(`id`) AS absId \nFROM \n    `customers` \nWHERE \n    `First Name` LIKE 'm%' AND ABS(`id`) &gt; 1 \nORDER BY \n    absId\n</code></pre> Incorrect function and <code>WHERE</code> clause usage <pre><code>--Won't work\nSELECT \n    `Address.City` AS City\n    ,ABS(`id`) AS absId \nFROM \n    `customers` \nWHERE \n    `First Name` LIKE 'm%' AND absId &gt; 1\n</code></pre>"},{"location":"sql-syntax/where-clause/#selecting-on-a-calculated-column-by-name","title":"Selecting on a calculated column by name","text":"<p>Calculated columns in <code>WHERE</code> clauses can only be used with aggregates</p> Calculated columns in <code>WHERE</code> clauses with aggregates <pre><code>--have to repeat select statement as with sql rules\nSELECT \n    id\n    ,Title\n    ,Rating\n    ,ABS(id) AS absId \nFROM \n    `films` \nWHERE ABS(id)=1\n</code></pre>"},{"location":"sql-syntax/window-functions/","title":"<code>Window Functions</code>","text":"<p>Window functions applies aggregate and ranking functions over a particular window (set of rows).</p>"},{"location":"sql-syntax/window-functions/#rank","title":"RANK","text":"<p>The <code>RANK()</code> function assigns a rank to every row within a partition of a result set.</p> <p>For each partition, the rank of the first row is 1. The <code>RANK()</code> function adds the number of tied rows to the tied rank to calculate the rank of the next row, so the ranks may not be sequential. In addition, rows with the same values will get the same rank.</p> Correct <code>RANK</code> usage <pre><code>--Correct\nSELECT  value,\n        RANK () OVER (\n            ORDER BY value\n        ) rank_number,\n        unset(_id)\nFROM function-test-data\nWHERE testId='bugfix.rank.case1'\n</code></pre>"},{"location":"sql-syntax/window-functions/#row_number","title":"ROW_NUMBER","text":"<p>The <code>ROW_NUMBER()</code> function is a window function that assigns a sequential integer to each row in a result set.</p> Correct <code>ROW_NUMBER</code> usage <pre><code>--Correct\nSELECT  value,\n        ROW_NUMBER() OVER (\n            ORDER BY value\n        ) row_number,\n        unset(_id)\nFROM function-test-data\nWHERE testId='bugfix.rank.case1'\n</code></pre>"},{"location":"sql-syntax/window-functions/#dense_rank","title":"DENSE_RANK","text":"<p>The <code>DENSE_RANK()</code> assigns a rank to every row in each partition of a result set. Different from the <code>RANK()</code> function, the <code>DENSE_RANK()</code> function always returns consecutive rank values.</p> <p>For each partition, the <code>DENSE_RANK()</code> function returns the same rank for the rows which have the same values</p> Correct <code>DENSE_RANK</code> usage <pre><code>--Correct\nSELECT  value,\n        DENSE_RANK () OVER (\n            ORDER BY value\n        ) rank_number,\n        unset(_id)\nFROM function-test-data\nWHERE testId='bugfix.dense-rank.case1'\n</code></pre>"},{"location":"sql-syntax/window-functions/#ntile","title":"NTILE","text":"<p>Currently not supported, Blocking Issue</p>"}]}